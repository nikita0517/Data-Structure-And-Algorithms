#define SIZE 50
#define TRUE 1
#define FALSE 0
#include<stdio.h>
#include<string.h>
char stack[SIZE];
int top = -1;
void push(char symbol)
{
    top++;
    stack[top] = symbol;
}
char pop()
{
    char symbol = stack[top];
    top--;
    return symbol;
}
int getpriority(char symbol)
{
    if(symbol == '+' || symbol == '-')
    {
        return 1;
    }
    else if(symbol == '*' || symbol == '/' || symbol == '%')
    {
        return 2;
    }
}
int isoperator(char symbol)
{
    if(symbol == '+' || symbol == '-' || symbol == '*' ||
        symbol == '/' || symbol == '%')
    {
        return TRUE;
    }
    else
    {
        return FALSE;
    }
}
main()
{
    char infix[SIZE], postfix[SIZE], symbol;
    int j = 0;
    printf("Enter the infix expression\n");
    scanf("%s", infix);
    strcat(infix, ")");
    push('(');
    for(int i = 0; infix[i] != '\0'; i++)
    {
        if(infix[i] == '(')
        {
            push(infix[i]);
        }
        else if(isoperator(infix[i]))
        {
            while(isoperator(stack[top]) && (getpriority(stack[top]) >= getpriority(infix[i])))
            {
                symbol = pop();
                postfix[j] = symbol;
                j++;
            }
            push(infix[i]);
        }
        else if(infix[i] == ')')
        {
            while((symbol = pop()) != '(')
            {
                postfix[j] = symbol;
                j++;
            }
        }
        else
        {
            postfix[j] = infix[i];
            j++;
        }
    }
    postfix[j] = '\0';
    printf("%s", postfix);
}
