#include<stdio.h>
#include<conio.h>
#include<stdlib.h>
#define size 5
int dequeue[size], front = -1, rear = -1, num;
void enqueue_at_rear(void)
{
if(front == 0 && rear == size - 1 || front == rear + 1)
   {
printf("dequeue is full\n");
   }
   else
   {
    if(front == -1)
      {
      front = 0;
         rear = 0;
      }
      else if(rear == size - 1)
      {
      rear = 0;
      }
      else
      {
      rear++;
      }
      printf("Enter a number\n");
      scanf("%d", &num);
      dequeue[rear] = num;
   }
}
void enqueue_at_front(void)
{
if(front == 0 && rear == size - 1 || front == rear + 1)
   {
printf("dequeue is full\n");
   }
   else
   {
    if(front == -1)
      {
      front = 0;
         rear = 0;
      }
      else if(front == 0)
      {
      front = size - 1;
      }
      else
      {
      front--;
      }
      printf("Enter a number\n");
      scanf("%d", &num);
      dequeue[front] = num;
   }
}
void dequeue_from_front(void)
{
if(front == -1)
   {
printf("dequeue is empty\n");
   }
   else
   {
    num = dequeue[front];
    printf("Element dequeued from front of dequeue is %d\n", num);
    if(front == rear)
      {
      front = -1;
         rear = -1;
      }
      else if(front == size - 1)
      {
      front = 0;
      }
      else
      {
      front++;
      }
   }
}
void dequeue_from_rear(void)
{
if(front == -1)
   {
printf("dequeue is empty\n");
   }
   else
   {
    num = dequeue[rear];
    printf("Element dequeued from rear of dequeue is %d\n", num);
    if(front == rear)
      {
      front = -1;
         rear = -1;
      }
      else if(rear == 0)
      {
      rear = size - 1;
      }
      else
      {
      rear--;
      }
   }
}
void traverse(void)
{
if(front == -1)
   {
    printf("No element to traverse\n");
   }
   else
   {
    int i;
      if(front <= rear)
      {
      for(i = front; i <= rear; i++)
         {
          printf("%d ", dequeue[i]);
         }
      }
      else
      {
      for(i = front; i <= size - 1; i++)
         {
          printf("%d ", dequeue[i]);
         }
         for(i = 0; i <= rear; i++)
         {
          printf("%d ", dequeue[i]);
         }
      }
      printf("\n");
   }
}
void input_restricted_dequeue(void)
{
int ch;
   do
   {
    printf("Input Restricted Dequeu\n");
    printf("Enter 1 to enqueue in dequeue\n");
      printf("Enter 2 to dequeue from front of dequeue\n");
      printf("Enter 3 to dequeue from rear of dequeue\n");
      printf("Enter 4 to to traverse all elements of dequeue\n");
      printf("Enter 5 to exit\n");
      scanf("%d", &ch);
      switch(ch)
      {
      case 1:
          enqueue_at_rear();
            break;
         case 2:
          dequeue_from_front();
            break;
         case 3:
          dequeue_from_rear();
            break;
         case 4:
          traverse();
          break;
         case 5:
          exit(0);
         default:
          printf("Wrong choice entered\n");
      }
      printf("Enter 0 to continue\n");
      scanf("%d", &ch);
   }
   while(ch == 0);
}
void output_restricted_dequeue(void)
{
int ch;
   do
   {
    printf("Output Restricted Dequeu\n");
    printf("Enter 1 to enqueue at rear of dequeue\n");
      printf("Enter 2 to enqueue at front of dequeue\n");
      printf("Enter 3 to dequeue from dequeue\n");
      printf("Enter 4 to to traverse all elements of dequeue\n");
      printf("Enter 5 to exit\n");
      scanf("%d", &ch);
      switch(ch)
      {
      case 1:
          enqueue_at_rear();
            break;
         case 2:
          enqueue_at_front();
            break;
         case 3:
          dequeue_from_front();
            break;
         case 4:
          traverse();
          break;
         case 5:
          exit(0);
         default:
          printf("Wrong choice entered\n");
      }
      printf("Enter 0 to continue\n");
      scanf("%d", &ch);
   }
   while(ch == 0);
}
int main()
{
int ch;
   printf("Enter 1 for input restricted queue\n");
   printf("Enter 2 for output restricted queue\n");
   scanf("%d", &ch);
   switch(ch)
   {
    case 1:
      input_restricted_dequeue();
         break;
      case 2:
      output_restricted_dequeue();
         break;
      default:
      printf("Wrong choice entered\n");
   }
   return 0;
}
